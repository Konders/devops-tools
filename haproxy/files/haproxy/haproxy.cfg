defaults
    timeout connect 5s
    timeout client 5s
    timeout server 30s
    mode http

frontend web_proxy
    bind *:80
    
    #ACL on path
    acl path_check1 path -m beg -i /api/v1
    acl path_check1 path -m beg -i /api/v2
    # Important note: Use above ACLs in according of their definition
    use_backend server1 if path_check1
    # Below is same as above
    #use_backend web-server if { path -m end -i /api/v1 }
    use_backend server2 if path_check2
    
    #ACL on url parameters
    #Route in according to Region
    acl urlparam1 url_param(region) -i -m reg w.*
    acl urlparam1 url_param(region) -i -m str east north
    use_backend server1 if urlparam1
    use_backend server2 if urlparam2
    
    #ACL on header of either request (req.hdr) or response (res.hdr)
    #Route in according to subdomain
    acl header_check1 hdr_end(Host) -i -m str app1.mysite.ir
    acl header_check2 hdr_end(Host) -i -m str app2.mysite.ir
    use_backend server2 if header_check1
    use_backend server2 if header_check2

    #ACL on user agent
    acl header_check3 hdr_end(User-Agent) -i -m reg (Android|Iphone)
    use_backend server1
    #Default backend must be last line
    default_backend webs

    
    #Redirect
    #Use cases:
    #[use-case1] mysite.com --> mysite.ir
    #[use-case2] mysyte.ir --> mysite.ir
    #[use-case3] www.mysite.ir --> mysite.ir
    
    #Prefix
    #(prefix) mysite.com/page2/test.jpeg --> mysite.ir/page2/test.jpeg
    #(prefix drop-query) mysite.com/page2/test.jpeg --> mysite.ir
    acl check_domain1 hdr(Host) -i -m str mysite.com
    redirect prefix http://mysite.ir drop-query code 301 if check_domain1
    
    #Location
    acl checkp-domain2 hdr(Host) -i -m str mysite.com
    redirect location http://mysite.ir if check_domain2


    #Http-request
    http-request set-header X-City %[src,map_ip(/usr/local/etc/haproxy/geolocation.txt)]

    acl is-west req-hdr(X-City) -i -m sub we
    acl is-east req-hdr(X-City) -i -m sub ea
    acl is-north req-hdr(X-City) -i -m sub no
    acl is-south req-hdr(X-City) -i -m sub so

    redirect location http://west.mysite.ir if is-west
    redirect location http://east.mysite.ir if is-east
    redirect location http://north.mysite.ir if is-north
    redirect location http://west.mysite.ir if is-south
 
backend webs
   mode http
   balance roundrobin
   server srv1 web1:80 check weight 4 maxconn 20 slowstart 10s
   server srv2 web2:80 check weight 4 maxconn 40 slowstart 20s

backend server1
    balance roundrobin
    server srv1 web1:80 check weight 4 maxconn 20 slowstart 10s
#    option forwardfor

backend server2
    balance roundrobin
    server srv2 web2:80 check weight 4 maxconn 40 slowstart 20s

#Health check (mode tcp = layer 4)
backend serverCheck
  mode tcp
  balance roundrobin
  #fall 2: Wait until 2 consecutive healthcheck failure to not to send any further request to the server
  #rise 5: Wait until 5 consecutive healthcheck passes successfully to re-start sending the requests to this server
  #downinter 10m: Check interval of a down server (the server with failure in health checks)
  #addr & port: You can define a different IP:PORT for health checks
  server srv1 web2:80 check inter 4s fall 2 rise 5 downinter 10m addr <IP> port <port>

#Health check (mode http = layer 7)
backend serverCheck
  mode http
  #Method `option` (instead of method get) is more light and have any more load on the server.
  #Method `option` may not be allowed by the server. So, method `head` can be used to request url: `mysite.ir/testpage` with specific defined headers:
  # HTTP/1.1
  # Host: mysite.ir
  option httpchk HEAD /testpage HTTP/1.1\r\nHost:\ mysite.ir

  #[Default] Status code 2xx or 3xx --> server is alive
  http-check expect status 200
  #rstatus = regex status code
  http-check expect rstatus ^2(/d){2}$
  #Check body string content
  http-check expect rstring success

  balance roundrobin
  server srv1 web2:80 check 
